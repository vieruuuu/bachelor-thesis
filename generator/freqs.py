from lib import (
    python_array_to_cpp,
    python_complex_array_to_cpp,
    python_int_array_to_cpp,
    closest_pitch_from_scale,
    generate_cpp_enum,
)
from vars import *
import numpy as np


def generate_freq_arrays():
    array_type = "real_t"

    common_freq_arrays = ""

    common_freq_arrays += "#pragma once\n\n"
    common_freq_arrays += "// generated by python script\n"
    common_freq_arrays += '#include "ap_fixed.h"\n'
    common_freq_arrays += '#include "common_types.hpp"\n'
    common_freq_arrays += '#include "common_constants.generated.hpp"\n\n'

    ###
    freqs = FMIN * 2 ** (np.arange(N_PITCH_BINS) / (12 * N_BINS_PER_SEMITONE))

    common_freq_arrays += f"constexpr unsigned int freqs_size = n_pitch_bins;\n"

    common_freq_arrays += python_array_to_cpp(
        freqs, "freqs", array_type, "[freqs_size]"
    )

    common_freq_arrays += "\n"
    ###

    ###
    freq_corrected_all = np.asarray(
        list(map(lambda scale: closest_pitch_from_scale(freqs, scale), SCALES))
    )
    freq_corrected_all_unique, freq_corrected_all_idx = np.unique(
        freq_corrected_all, return_inverse=True
    )

    common_freq_arrays += python_array_to_cpp(
        freq_corrected_all_unique,
        "freq_corrected_all_unique",
        array_type,
        "[]",
    )

    common_freq_arrays += python_int_array_to_cpp(
        freq_corrected_all_idx,
        "freq_corrected_all_idx",
        "index<length_of(freq_corrected_all_unique)>",
        f"[{len(SCALES)}][freqs_size]",
    )
    common_freq_arrays += "\n"

    common_freq_arrays += generate_cpp_enum(SCALES, "Scales")

    ###

    with open("../common/common_freq_arrays.generated.hpp", "w") as cpp_file:
        cpp_file.write(common_freq_arrays)
